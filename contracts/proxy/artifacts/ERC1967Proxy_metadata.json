{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_logic",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"stateMutability": "payable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "AdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beacon",
						"type": "address"
					}
				],
				"name": "BeaconUpgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "implementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "impl",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bool",
						"name": "forceCall",
						"type": "bool"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.",
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity constructor."
				},
				"implementation()": {
					"details": "Returns the current implementation address."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"upgradeTo(address)": {
					"details": "Perform implementation upgrade Emits an {Upgraded} event."
				},
				"upgradeToAndCall(address,bytes,bool)": {
					"details": "Perform implementation upgrade with additional setup call. Emits an {Upgraded} event."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/proxy/ERC1967Proxy.sol": "ERC1967Proxy"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/GSN/Context.sol": {
			"keccak256": "0xf1a3b19ae81af9cb0d839d1f55f83662028e38020bb31caa26dd023c84d47dcd",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://4549d8ed2b3b265e8938fa329cdbb5ce9d89d5011fee7786fcc7f68cc3192751",
				"dweb:/ipfs/QmZUwMEYFUzsQ6AABMzbWjCQXZbFXRDAbf5CYCRiee5FLA"
			]
		},
		"contracts/access/Ownable.sol": {
			"keccak256": "0x91bacefb5d403d6a6a7a51815a374ebc383989ea1367849e8be5d79ba93036de",
			"license": "GPL-3.0-or-later",
			"urls": [
				"bzz-raw://179f9ccae14b2325a48a3e42fb50901215bb08bb6811106ec93d727d92638957",
				"dweb:/ipfs/QmUF15DXn4uedxQVMWU8nhEL5CsszFGLN1sHw15x9on6sa"
			]
		},
		"contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
			"keccak256": "0x5449e310ec150fea4adebf2e1b45303c5f15a0cb191adcf7710037dacb54d116",
			"license": "MIT",
			"urls": [
				"bzz-raw://31bad8daae4cdc3cbc46ba2b4191ad5056846445ea267b96e16016d3f7558ff6",
				"dweb:/ipfs/QmQsYjgMQXDKV4b2jeufj6GWCxqtmAKWq7UCx7iGKqdHbb"
			]
		},
		"contracts/proxy/ERC1967Proxy.sol": {
			"keccak256": "0x3a0bd157bcad8432e03143caea182b0d3afadb30b58a2944c05445ef0616ce27",
			"license": "MIT",
			"urls": [
				"bzz-raw://4f24c82b5d8decab80f6b5763fe148ea14de8a1c3b8720c5fd9a55698eba181d",
				"dweb:/ipfs/QmRntveBoZpiuPAPk6XaiBpkq8foxUeC3gZLQFQe96W6aP"
			]
		},
		"contracts/proxy/Proxy.sol": {
			"keccak256": "0x234465fb6eb92ff3a1d4bf5b2a831e15ce182888e1746844bd8fa5633e1f1cd4",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3e0f5c87091782339262ff5e06c26aee347699e76aa73bdef64a8ef6e4c30d1",
				"dweb:/ipfs/QmbRUBnAcCoU6b5cRAn1LKCNyG3o3L95C2aERbt5zBaXvm"
			]
		},
		"contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7c6a52e49bd374890523443ac6e20fa0ca09ff8d65d5adbca6f2c8733758eea",
				"dweb:/ipfs/QmXXccov4bGGVqg6BwYc8QU9JwCNHmVYePj1ZYpgkxTbpF"
			]
		},
		"contracts/utils/Address.sol": {
			"keccak256": "0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a05eec7083dfa0cc7e0cbfe6cd1bd085a340af1ede93fdff3ad047c5fb3d8e",
				"dweb:/ipfs/QmVApz5fCUq2QC8gKTsNNdCmcedJ3ETHp68zR5N3WUKS4r"
			]
		},
		"contracts/utils/StorageSlot.sol": {
			"keccak256": "0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7c5c1fe2972d97dca1af03884c78315eb261bb486bacfadd04b0f440fdcfd6e",
				"dweb:/ipfs/QmTNTSdUSzUKWEeTH2A37RDXJ2Xf5jfTTpLuy1oudPPE8N"
			]
		}
	},
	"version": 1
}